package form3client

import (
	"fmt"
	"os"
	"reflect"
	"strings"

	"github.com/DATA-DOG/godog/gherkin"
)

func (c *clientFeature) ANewAccountIsSetUp(filename string) error {
	c.originalAccount = readFromFile(filename)
	if c.originalAccount.ID == "<dynamically generated by bdd test>" {
		c.originalAccount.ID = generateUUID()
	}
	return nil
}

func (c *clientFeature) theUserUsesTheClientToCreateIt() error {
	var data Data
	data, err := Create(&c.originalAccount)

	c.err = err
	c.createdAccountResponse = data
	c.createdAccountIDs = append(c.createdAccountIDs, c.createdAccountResponse.ID)
	return nil
}

func (c *clientFeature) theUserShouldGetAResponseWithTheSameAccountPlusExtraFields() error {
	if !reflect.DeepEqual(c.createdAccountResponse.Account.Attributes, c.originalAccount.Attributes) {
		return fmt.Errorf("Expected created response account field 'attributes' of: %+v\n to be equal to the Actual account 'attributes': %+v\n but they were not", c.createdAccountResponse.Account.Attributes, c.originalAccount.Attributes)
	}
	if !reflect.DeepEqual(c.createdAccountResponse.Account.ID, c.originalAccount.ID) {
		return fmt.Errorf("Expected created response account field 'ID' of: %+v\n to be equal to the Actual account 'ID': %+v\n but they were not", c.createdAccountResponse.Account.ID, c.originalAccount.ID)
	}
	if !reflect.DeepEqual(c.createdAccountResponse.Account.OrganisationID, c.originalAccount.OrganisationID) {
		return fmt.Errorf("Expected created response account field 'OrganisationID' of: %+v\n to be equal to the Actual account 'OrganisationID': %+v\n but they were not", c.createdAccountResponse.Account.OrganisationID, c.originalAccount.OrganisationID)
	}
	if !reflect.DeepEqual(c.createdAccountResponse.Account.Type, c.originalAccount.Type) {
		return fmt.Errorf("Expected created response account Type of: %+v\n to be equal to the Actual account 'Type': %+v\n but they were not", c.createdAccountResponse.Account.Type, c.originalAccount.Type)
	}
	if c.createdAccountResponse.Account.CreatedOn == nil {
		return fmt.Errorf("Expected created response account field 'CreatedOn' to be set but it was not")
	}
	if c.createdAccountResponse.Account.ModifiedOn == nil {
		return fmt.Errorf("Expected created response account field 'ModifiedOn' to be set but it was not")
	}
	if c.createdAccountResponse.Links.Self == "" {
		return fmt.Errorf("expected created response field 'Self' to not be empty but it was")
	}
	return nil
}

func (c *clientFeature) theUserShouldGetTheFollowingError(expectedErrorMessage *gherkin.DocString) error {
	if c.err.Error() != expectedErrorMessage.Content {
		return fmt.Errorf("expected error message \n%s\n was not equal to the actual error message \n%s\n ", expectedErrorMessage.Content, c.err.Error())
	}
	return nil
}

func (c *clientFeature) theUserShouldGetAnErrorContaining(expectedErrorMessage *gherkin.DocString) error {
	//contrains used, as error might be slightly different if ran outside docker.
	if !strings.Contains(c.err.Error(), expectedErrorMessage.Content) {
		return fmt.Errorf("expected error message \n%s\n was not equal to the actual error message \n%s\n ", expectedErrorMessage.Content, c.err.Error())
	}
	return nil
}

func theUserHasNoNetworkAccess() error {
	os.Setenv("API", "http://simulate-network-error.non.existing.domain/")
	return nil
}
